{"ast":null,"code":"import * as type from '../actions/types';\nimport _ from 'lodash';\nexport default ((state = {}, action) => {\n  switch (action.type) {\n    case type.FETCH_PHOTOS:\n      // Use lodash to take the array returned as payload and map it to my object of photos\n      // Use the id property of each photo in the array as its key in the new merged object\n      return { ...state,\n        ..._.mapKeys(action.payload, 'id')\n      };\n\n    case type.FETCH_PHOTO:\n      // Using key interpolation to assign the property with a key of id and value of payload\n      return { ...state,\n        [action.payload.id]: action.payload\n      };\n\n    case type.CREATE_PHOTO:\n      return { ...state,\n        [action.payload.id]: action.payload\n      };\n\n    case type.EDIT_PHOTO:\n      return { ...state,\n        [action.payload.id]: action.payload\n      };\n\n    case type.DELETE_PHOTO:\n      // Use lodash to remove stream with the id given in the payload\n      return _.omit(state, action.payload);\n\n    case type.HOVER_PHOTO:\n      return { ...state,\n        isHoverPhoto: action.payload\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/Sarah Schwartz/Desktop/CODING/Apps REACT/pinterest-clone-react-redux/pinterest-clone-react-redux/client/src/reducers/photoReducer.js"],"names":["type","_","state","action","FETCH_PHOTOS","mapKeys","payload","FETCH_PHOTO","id","CREATE_PHOTO","EDIT_PHOTO","DELETE_PHOTO","omit","HOVER_PHOTO","isHoverPhoto"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,kBAAtB;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,gBAAe,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACrC,UAAQA,MAAM,CAACH,IAAf;AACE,SAAKA,IAAI,CAACI,YAAV;AACE;AACA;AACA,aAAO,EAAE,GAAGF,KAAL;AAAY,WAAGD,CAAC,CAACI,OAAF,CAAUF,MAAM,CAACG,OAAjB,EAA0B,IAA1B;AAAf,OAAP;;AACF,SAAKN,IAAI,CAACO,WAAV;AACE;AACA,aAAO,EAAE,GAAGL,KAAL;AAAY,SAACC,MAAM,CAACG,OAAP,CAAeE,EAAhB,GAAqBL,MAAM,CAACG;AAAxC,OAAP;;AACF,SAAKN,IAAI,CAACS,YAAV;AACE,aAAO,EAAE,GAAGP,KAAL;AAAY,SAACC,MAAM,CAACG,OAAP,CAAeE,EAAhB,GAAqBL,MAAM,CAACG;AAAxC,OAAP;;AACF,SAAKN,IAAI,CAACU,UAAV;AACE,aAAO,EAAE,GAAGR,KAAL;AAAY,SAACC,MAAM,CAACG,OAAP,CAAeE,EAAhB,GAAqBL,MAAM,CAACG;AAAxC,OAAP;;AACF,SAAKN,IAAI,CAACW,YAAV;AACE;AACA,aAAOV,CAAC,CAACW,IAAF,CAAOV,KAAP,EAAcC,MAAM,CAACG,OAArB,CAAP;;AACF,SAAKN,IAAI,CAACa,WAAV;AACE,aAAO,EAAE,GAAGX,KAAL;AAAYY,QAAAA,YAAY,EAAEX,MAAM,CAACG;AAAjC,OAAP;;AACF;AACE,aAAOJ,KAAP;AAlBJ;AAoBD,CArBD","sourcesContent":["import * as type from '../actions/types';\nimport _ from 'lodash';\n\nexport default (state = {}, action) => {\n  switch (action.type) {\n    case type.FETCH_PHOTOS:\n      // Use lodash to take the array returned as payload and map it to my object of photos\n      // Use the id property of each photo in the array as its key in the new merged object\n      return { ...state, ..._.mapKeys(action.payload, 'id') };\n    case type.FETCH_PHOTO:\n      // Using key interpolation to assign the property with a key of id and value of payload\n      return { ...state, [action.payload.id]: action.payload };\n    case type.CREATE_PHOTO:\n      return { ...state, [action.payload.id]: action.payload };\n    case type.EDIT_PHOTO:\n      return { ...state, [action.payload.id]: action.payload };\n    case type.DELETE_PHOTO:\n      // Use lodash to remove stream with the id given in the payload\n      return _.omit(state, action.payload);\n    case type.HOVER_PHOTO:\n      return { ...state, isHoverPhoto: action.payload };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}