{"ast":null,"code":"var _jsxFileName = \"/Users/Sarah Schwartz/Desktop/CODING/Apps REACT/pinterest-clone-react-redux/pinterest-clone-react-redux/client/src/components/photos/PhotoEdit.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPhoto, editPhoto } from '../../actions';\nimport _ from 'lodash';\nimport PhotoForm from './PhotoForm';\n\nclass PhotoEdit extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onSubmit = formValues => {\n      this.props.editPhoto(this.props.match.params.id, formValues);\n    };\n  }\n\n  componentDidMount() {\n    // Use the props that router automatically passes to rendered components (it contains the params from the routes, such as :id)\n    const {\n      id\n    } = this.props.match.params;\n    this.props.fetchPhoto(id);\n  }\n\n  render() {\n    if (!this.props.photo) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 14\n        }\n      }, \"Loading...\");\n    } // \"initialValues\" is a redux form property that passes initial values of the object into the form by matching field names to object key names\n    // Use lodash pick to pass a new object with only the properties I want, so that \"id\" and \"userId\" don't get registered as having changed\n\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content ui container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }\n    }, \"Edit Photo\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"ui grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      class: \"ten wide column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      class: \"six wide column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(PhotoForm, {\n      initialValues: _.pick(this.props.photo, 'title', 'url', 'tags'),\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"img\", {\n      src: this.props.photo.url,\n      alt: this.props.photo.title,\n      style: {\n        maxHeight: '300px',\n        maxWidth: '500px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  // Router automatically passes these props to its rendered components\n  const {\n    id\n  } = ownProps.match.params;\n  return {\n    photo: state.photos[id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchPhoto,\n  editPhoto\n})(PhotoEdit);","map":{"version":3,"sources":["/Users/Sarah Schwartz/Desktop/CODING/Apps REACT/pinterest-clone-react-redux/pinterest-clone-react-redux/client/src/components/photos/PhotoEdit.js"],"names":["React","Component","connect","fetchPhoto","editPhoto","_","PhotoForm","PhotoEdit","onSubmit","formValues","props","match","params","id","componentDidMount","render","photo","pick","url","title","maxHeight","maxWidth","mapStateToProps","state","ownProps","photos"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,eAAtC;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AAEA,MAAMC,SAAN,SAAwBN,SAAxB,CAAkC;AAAA;AAAA;;AAAA,SAOhCO,QAPgC,GAOpBC,UAAD,IAAgB;AACzB,WAAKC,KAAL,CAAWN,SAAX,CAAqB,KAAKM,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA7C,EAAiDJ,UAAjD;AACD,KAT+B;AAAA;;AAChCK,EAAAA,iBAAiB,GAAG;AAClB;AACA,UAAM;AAAED,MAAAA;AAAF,QAAS,KAAKH,KAAL,CAAWC,KAAX,CAAiBC,MAAhC;AACA,SAAKF,KAAL,CAAWP,UAAX,CAAsBU,EAAtB;AACD;;AAMDE,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKL,KAAL,CAAWM,KAAhB,EAAuB;AACrB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD,KAHM,CAKP;AACA;;;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,KAAK,EAAC,iBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAK,MAAA,KAAK,EAAC,iBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAFF,eAME,oBAAC,SAAD;AACE,MAAA,aAAa,EAAEX,CAAC,CAACY,IAAF,CAAO,KAAKP,KAAL,CAAWM,KAAlB,EAAyB,OAAzB,EAAkC,KAAlC,EAAyC,MAAzC,CADjB;AAEE,MAAA,QAAQ,EAAE,KAAKR,QAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,eAUE;AACE,MAAA,GAAG,EAAE,KAAKE,KAAL,CAAWM,KAAX,CAAiBE,GADxB;AAEE,MAAA,GAAG,EAAE,KAAKR,KAAL,CAAWM,KAAX,CAAiBG,KAFxB;AAGE,MAAA,KAAK,EAAE;AAAEC,QAAAA,SAAS,EAAE,OAAb;AAAsBC,QAAAA,QAAQ,EAAE;AAAhC,OAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,CADF;AAkBD;;AApC+B;;AAuClC,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C;AACA,QAAM;AAAEX,IAAAA;AAAF,MAASW,QAAQ,CAACb,KAAT,CAAeC,MAA9B;AACA,SAAO;AACLI,IAAAA,KAAK,EAAEO,KAAK,CAACE,MAAN,CAAaZ,EAAb;AADF,GAAP;AAGD,CAND;;AAQA,eAAeX,OAAO,CAACoB,eAAD,EAAkB;AAAEnB,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAlB,CAAP,CAAoDG,SAApD,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPhoto, editPhoto } from '../../actions';\nimport _ from 'lodash';\nimport PhotoForm from './PhotoForm';\n\nclass PhotoEdit extends Component {\n  componentDidMount() {\n    // Use the props that router automatically passes to rendered components (it contains the params from the routes, such as :id)\n    const { id } = this.props.match.params;\n    this.props.fetchPhoto(id);\n  }\n\n  onSubmit = (formValues) => {\n    this.props.editPhoto(this.props.match.params.id, formValues);\n  };\n\n  render() {\n    if (!this.props.photo) {\n      return <div>Loading...</div>;\n    }\n\n    // \"initialValues\" is a redux form property that passes initial values of the object into the form by matching field names to object key names\n    // Use lodash pick to pass a new object with only the properties I want, so that \"id\" and \"userId\" don't get registered as having changed\n    return (\n      <div className='content ui container'>\n        <h3>Edit Photo</h3>\n        <div className='ui grid'>\n          <div class='ten wide column'></div>\n          <div class='six wide column'></div>\n        </div>\n        <PhotoForm\n          initialValues={_.pick(this.props.photo, 'title', 'url', 'tags')}\n          onSubmit={this.onSubmit}\n        />\n        <img\n          src={this.props.photo.url}\n          alt={this.props.photo.title}\n          style={{ maxHeight: '300px', maxWidth: '500px' }}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  // Router automatically passes these props to its rendered components\n  const { id } = ownProps.match.params;\n  return {\n    photo: state.photos[id],\n  };\n};\n\nexport default connect(mapStateToProps, { fetchPhoto, editPhoto })(PhotoEdit);\n"]},"metadata":{},"sourceType":"module"}