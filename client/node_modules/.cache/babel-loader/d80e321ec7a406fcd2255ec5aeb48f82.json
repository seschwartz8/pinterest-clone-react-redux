{"ast":null,"code":"var _jsxFileName = \"/Users/Sarah Schwartz/Desktop/CODING/Apps REACT/pinterest-clone-react-redux/pinterest-clone-react-redux/client/src/components/photos/PhotoEdit.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPhoto, editPhoto } from '../../actions';\n\nclass PhotoEdit extends Component {\n  componentDidMount() {\n    // Use the props that router automatically passes to rendered components (it contains the params from the routes, such as :id)\n    const specificId = this.props.match.params.id;\n    this.props.fetchPhoto(specificId);\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 14\n        }\n      }, \"Loading...\");\n    } // \"initialValues\" is a redux form property that passes initial values of the object into the form by matching field names to object key names\n    // Use lodash pick to pass a new object with only the properties I want, so that \"id\" and \"userId\" don't get registered as having changed\n\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"content ui container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }\n    }, \"Edit Photo\"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }\n    }, this.props.photo.title), /*#__PURE__*/React.createElement(PhotoForm, {\n      initialValues: _.pick(this.props.photo, 'title', 'url'),\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  // Router automatically passes these props to its rendered components\n  const specificId = ownProps.match.params.id;\n  return {\n    photo: state.photos[specificId]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchPhoto,\n  editPhoto\n})(PhotoEdit);","map":{"version":3,"sources":["/Users/Sarah Schwartz/Desktop/CODING/Apps REACT/pinterest-clone-react-redux/pinterest-clone-react-redux/client/src/components/photos/PhotoEdit.js"],"names":["React","Component","connect","fetchPhoto","editPhoto","PhotoEdit","componentDidMount","specificId","props","match","params","id","render","stream","photo","title","_","pick","onSubmit","mapStateToProps","state","ownProps","photos"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,eAAtC;;AAEA,MAAMC,SAAN,SAAwBJ,SAAxB,CAAkC;AAChCK,EAAAA,iBAAiB,GAAG;AAClB;AACA,UAAMC,UAAU,GAAG,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBC,EAA3C;AACA,SAAKH,KAAL,CAAWL,UAAX,CAAsBI,UAAtB;AACD;;AAEDK,EAAAA,MAAM,GAAG;AACP,QAAI,CAAC,KAAKJ,KAAL,CAAWK,MAAhB,EAAwB;AACtB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD,KAHM,CAKP;AACA;;;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAK,KAAKL,KAAL,CAAWM,KAAX,CAAiBC,KAAtB,CAFF,eAGE,oBAAC,SAAD;AACE,MAAA,aAAa,EAAEC,CAAC,CAACC,IAAF,CAAO,KAAKT,KAAL,CAAWM,KAAlB,EAAyB,OAAzB,EAAkC,KAAlC,CADjB;AAEE,MAAA,QAAQ,EAAE,KAAKI,QAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF;AAUD;;AAxB+B;;AA2BlC,MAAMC,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C;AACA,QAAMd,UAAU,GAAGc,QAAQ,CAACZ,KAAT,CAAeC,MAAf,CAAsBC,EAAzC;AACA,SAAO;AACLG,IAAAA,KAAK,EAAEM,KAAK,CAACE,MAAN,CAAaf,UAAb;AADF,GAAP;AAGD,CAND;;AAQA,eAAeL,OAAO,CAACiB,eAAD,EAAkB;AAAEhB,EAAAA,UAAF;AAAcC,EAAAA;AAAd,CAAlB,CAAP,CAAoDC,SAApD,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { fetchPhoto, editPhoto } from '../../actions';\n\nclass PhotoEdit extends Component {\n  componentDidMount() {\n    // Use the props that router automatically passes to rendered components (it contains the params from the routes, such as :id)\n    const specificId = this.props.match.params.id;\n    this.props.fetchPhoto(specificId);\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return <div>Loading...</div>;\n    }\n\n    // \"initialValues\" is a redux form property that passes initial values of the object into the form by matching field names to object key names\n    // Use lodash pick to pass a new object with only the properties I want, so that \"id\" and \"userId\" don't get registered as having changed\n    return (\n      <div className='content ui container'>\n        <h3>Edit Photo</h3>\n        <h5>{this.props.photo.title}</h5>\n        <PhotoForm\n          initialValues={_.pick(this.props.photo, 'title', 'url')}\n          onSubmit={this.onSubmit}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  // Router automatically passes these props to its rendered components\n  const specificId = ownProps.match.params.id;\n  return {\n    photo: state.photos[specificId],\n  };\n};\n\nexport default connect(mapStateToProps, { fetchPhoto, editPhoto })(PhotoEdit);\n"]},"metadata":{},"sourceType":"module"}