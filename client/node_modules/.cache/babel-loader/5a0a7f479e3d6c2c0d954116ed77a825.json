{"ast":null,"code":"import * as type from './types';\nimport photos from '../apis/photos';\nimport history from '../history'; // AUTH ACTIONS\n\nexport const signIn = userId => {\n  return {\n    type: type.SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: type.SIGN_OUT\n  };\n};\nexport const pinPhoto = photo => {\n  return async (dispatch, getState) => {\n    // POST request with axios to pin photo to current user's board\n    const {\n      userId\n    } = getState().auth;\n    const response = await photos.post('/board', { ...photo,\n      pinnedBy: userId\n    });\n    dispatch({\n      type: type.PIN_PHOTO,\n      payload: response.data\n    });\n  };\n};\nexport const unPinPhoto = id => {\n  return async dispatch => {\n    // DELETE request with axios to remove specific pinned photo\n    await photos.delete(`/board/${id}`);\n    dispatch({\n      type: type.UNPIN_PHOTO,\n      payload: id\n    });\n  };\n};\nexport const fetchBoard = () => {\n  return async dispatch => {\n    // GET request with axios to get all pinned photos\n    const response = await photos.get('/board');\n    console.log(response.data);\n    dispatch({\n      type: type.FETCH_BOARD,\n      payload: response.data\n    });\n  };\n}; // HOVER ACTIONS\n\nexport const hoverPhoto = photoId => {\n  return {\n    type: type.HOVER_PHOTO,\n    payload: photoId\n  };\n};\nexport const leavePhoto = () => {\n  return {\n    type: type.LEAVE_PHOTO\n  };\n}; // PHOTO ACTIONS\n\nexport const createPhoto = formValues => {\n  return async (dispatch, getState) => {\n    // POST request with axios to create new photo with current userId\n    const {\n      userId\n    } = getState().auth;\n    const response = await photos.post('/photos', { ...formValues,\n      userId\n    });\n    dispatch({\n      type: type.CREATE_PHOTO,\n      payload: response.data\n    }); // Navigate the user back to list of photos (only after the API request is resolved)\n\n    history.push('/');\n  };\n};\nexport const fetchPhotos = () => {\n  return async dispatch => {\n    // GET request with axios to get all photos\n    const response = await photos.get('/photos');\n    dispatch({\n      type: type.FETCH_PHOTOS,\n      payload: response.data\n    });\n  };\n};\nexport const fetchPhoto = id => {\n  return async dispatch => {\n    // GET request for specific photo with given id\n    const response = await photos.get(`/photos/${id}`);\n    dispatch({\n      type: type.FETCH_PHOTO,\n      payload: response.data\n    });\n  };\n};\nexport const editPhoto = (id, formValues) => {\n  return async dispatch => {\n    // PATCH request with axios to edit specific photo with new formValues\n    const response = await photos.patch(`/photos/${id}`, formValues);\n    dispatch({\n      type: type.EDIT_PHOTO,\n      payload: response.data\n    }); // Navigate the user back to list of streams (only after API request is resolved)\n\n    history.push('/');\n  };\n};\nexport const deletePhoto = id => {\n  return async dispatch => {\n    // DELETE request with axios to remove specific photo\n    await photos.delete(`/photos/${id}`);\n    dispatch({\n      type: type.DELETE_PHOTO,\n      payload: id\n    }); // Navigate the user back to list of streams (only after API request is resolved)\n\n    history.push('/');\n  };\n};","map":{"version":3,"sources":["/Users/Sarah Schwartz/Desktop/CODING/Apps REACT/pinterest-clone-react-redux/pinterest-clone-react-redux/client/src/actions/index.js"],"names":["type","photos","history","signIn","userId","SIGN_IN","payload","signOut","SIGN_OUT","pinPhoto","photo","dispatch","getState","auth","response","post","pinnedBy","PIN_PHOTO","data","unPinPhoto","id","delete","UNPIN_PHOTO","fetchBoard","get","console","log","FETCH_BOARD","hoverPhoto","photoId","HOVER_PHOTO","leavePhoto","LEAVE_PHOTO","createPhoto","formValues","CREATE_PHOTO","push","fetchPhotos","FETCH_PHOTOS","fetchPhoto","FETCH_PHOTO","editPhoto","patch","EDIT_PHOTO","deletePhoto","DELETE_PHOTO"],"mappings":"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","sourcesContent":["import * as type from './types';\nimport photos from '../apis/photos';\nimport history from '../history';\n\n// AUTH ACTIONS\n\nexport const signIn = (userId) => {\n  return {\n    type: type.SIGN_IN,\n    payload: userId,\n  };\n};\n\nexport const signOut = () => {\n  return {\n    type: type.SIGN_OUT,\n  };\n};\n\nexport const pinPhoto = (photo) => {\n  return async (dispatch, getState) => {\n    // POST request with axios to pin photo to current user's board\n    const { userId } = getState().auth;\n\n    const response = await photos.post('/board', {\n      ...photo,\n      pinnedBy: userId,\n    });\n    dispatch({\n      type: type.PIN_PHOTO,\n      payload: response.data,\n    });\n  };\n};\n\nexport const unPinPhoto = (id) => {\n  return async (dispatch) => {\n    // DELETE request with axios to remove specific pinned photo\n    await photos.delete(`/board/${id}`);\n    dispatch({\n      type: type.UNPIN_PHOTO,\n      payload: id,\n    });\n  };\n};\n\nexport const fetchBoard = () => {\n  return async (dispatch) => {\n    // GET request with axios to get all pinned photos\n    const response = await photos.get('/board');\n\n    console.log(response.data);\n\n    dispatch({\n      type: type.FETCH_BOARD,\n      payload: response.data,\n    });\n  };\n};\n\n// HOVER ACTIONS\n\nexport const hoverPhoto = (photoId) => {\n  return {\n    type: type.HOVER_PHOTO,\n    payload: photoId,\n  };\n};\n\nexport const leavePhoto = () => {\n  return {\n    type: type.LEAVE_PHOTO,\n  };\n};\n\n// PHOTO ACTIONS\n\nexport const createPhoto = (formValues) => {\n  return async (dispatch, getState) => {\n    // POST request with axios to create new photo with current userId\n    const { userId } = getState().auth;\n    const response = await photos.post('/photos', { ...formValues, userId });\n    dispatch({\n      type: type.CREATE_PHOTO,\n      payload: response.data,\n    });\n    // Navigate the user back to list of photos (only after the API request is resolved)\n    history.push('/');\n  };\n};\n\nexport const fetchPhotos = () => {\n  return async (dispatch) => {\n    // GET request with axios to get all photos\n    const response = await photos.get('/photos');\n    dispatch({\n      type: type.FETCH_PHOTOS,\n      payload: response.data,\n    });\n  };\n};\n\nexport const fetchPhoto = (id) => {\n  return async (dispatch) => {\n    // GET request for specific photo with given id\n    const response = await photos.get(`/photos/${id}`);\n    dispatch({\n      type: type.FETCH_PHOTO,\n      payload: response.data,\n    });\n  };\n};\n\nexport const editPhoto = (id, formValues) => {\n  return async (dispatch) => {\n    // PATCH request with axios to edit specific photo with new formValues\n    const response = await photos.patch(`/photos/${id}`, formValues);\n    dispatch({\n      type: type.EDIT_PHOTO,\n      payload: response.data,\n    });\n    // Navigate the user back to list of streams (only after API request is resolved)\n    history.push('/');\n  };\n};\n\nexport const deletePhoto = (id) => {\n  return async (dispatch) => {\n    // DELETE request with axios to remove specific photo\n    await photos.delete(`/photos/${id}`);\n    dispatch({\n      type: type.DELETE_PHOTO,\n      payload: id,\n    });\n    // Navigate the user back to list of streams (only after API request is resolved)\n    history.push('/');\n  };\n};\n"]},"metadata":{},"sourceType":"module"}