{"ast":null,"code":"var _jsxFileName = \"/Users/Sarah Schwartz/Desktop/CODING/Apps REACT/pinterest-clone-react-redux/pinterest-clone-react-redux/client/src/components/photos/PhotoForm.js\";\n// Reusable form for creating and editing photos\nimport React, { Component } from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { Link } from 'react-router-dom';\n\nclass PhotoForm extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderError = ({\n      error,\n      touched\n    }) => {\n      // Destructure the error and touched properties off the formProps meta property\n      if (touched && error) {\n        // If field was touched and has error, print associated error message property (see validate fx below)\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: \"ui error message\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 13,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"header\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 14,\n            columnNumber: 11\n          }\n        }, error));\n      }\n    };\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      // Destructure the built-in redux-form 'input' formProps and hook them up to create controlled components\n      // Only highlight input with red if user has touched the input (so it's not red to start)\n      const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: className,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 9\n        }\n      }, label), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, input, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 9\n        }\n      })), this.renderError(meta));\n    };\n\n    this.onSubmit = formValues => {\n      // Call passed action on submit (e.g. POST photo or PUT edits to photo)\n      this.props.onSubmit(formValues);\n    };\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // Using the built-in redux-form handleSubmit and passing it to my onSubmit callback, which gets automatically passed the form's values\n      React.createElement(\"form\", {\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        className: \"ui form error\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter Title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Field, {\n        name: \"url\",\n        component: this.renderInput,\n        label: \"Enter URL\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Field, {\n        name: \"tags\",\n        component: this.renderInput,\n        label: \"Enter tags separated by #\",\n        placeholder: \"#cool#snazzy#puppies\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        className: \"ui primary button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 9\n        }\n      }, \"Submit\"), /*#__PURE__*/React.createElement(Link, {\n        to: \"/photos\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 9\n        }\n      }))\n    );\n  }\n\n}\n\nconst validate = formValues => {\n  // Redux-form automatically calls this whenever the form is interacted with\n  const errors = {};\n\n  if (!formValues.title) {\n    errors.title = 'You must enter a title';\n  }\n\n  if (!formValues.url) {\n    errors.url = 'You must enter a URL';\n  }\n\n  if (!formValues.tags) {\n    errors.tags = 'You must enter at least one tag with the following format (#tag#secondTag)';\n  } // Returning an empty object tells the redux-form the input is valid\n\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'photoForm',\n  validate\n})(PhotoForm);","map":{"version":3,"sources":["/Users/Sarah Schwartz/Desktop/CODING/Apps REACT/pinterest-clone-react-redux/pinterest-clone-react-redux/client/src/components/photos/PhotoForm.js"],"names":["React","Component","Field","reduxForm","Link","PhotoForm","renderError","error","touched","renderInput","input","label","meta","className","onSubmit","formValues","props","render","handleSubmit","validate","errors","title","url","tags","form"],"mappings":"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","sourcesContent":["// Reusable form for creating and editing photos\nimport React, { Component } from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport { Link } from 'react-router-dom';\n\nclass PhotoForm extends Component {\n  renderError = ({ error, touched }) => {\n    // Destructure the error and touched properties off the formProps meta property\n\n    if (touched && error) {\n      // If field was touched and has error, print associated error message property (see validate fx below)\n      return (\n        <div className='ui error message'>\n          <div className='header'>{error}</div>\n        </div>\n      );\n    }\n  };\n\n  renderInput = ({ input, label, meta }) => {\n    // Destructure the built-in redux-form 'input' formProps and hook them up to create controlled components\n\n    // Only highlight input with red if user has touched the input (so it's not red to start)\n    const className = `field ${meta.error && meta.touched ? 'error' : ''}`;\n    return (\n      <div className={className}>\n        <label>{label}</label>\n        <input {...input} />\n        {this.renderError(meta)}\n      </div>\n    );\n  };\n\n  onSubmit = (formValues) => {\n    // Call passed action on submit (e.g. POST photo or PUT edits to photo)\n    this.props.onSubmit(formValues);\n  };\n\n  render() {\n    return (\n      // Using the built-in redux-form handleSubmit and passing it to my onSubmit callback, which gets automatically passed the form's values\n      <form\n        onSubmit={this.props.handleSubmit(this.onSubmit)}\n        className='ui form error'\n      >\n        <Field name='title' component={this.renderInput} label='Enter Title' />\n        <Field name='url' component={this.renderInput} label='Enter URL' />\n        <Field\n          name='tags'\n          component={this.renderInput}\n          label='Enter tags separated by #'\n          placeholder='#cool#snazzy#puppies'\n        />\n        <button className='ui primary button'>Submit</button>\n        <Link to='/photos' />\n      </form>\n    );\n  }\n}\n\nconst validate = (formValues) => {\n  // Redux-form automatically calls this whenever the form is interacted with\n  const errors = {};\n  if (!formValues.title) {\n    errors.title = 'You must enter a title';\n  }\n  if (!formValues.url) {\n    errors.url = 'You must enter a URL';\n  }\n  if (!formValues.tags) {\n    errors.tags =\n      'You must enter at least one tag with the following format (#tag#secondTag)';\n  }\n  // Returning an empty object tells the redux-form the input is valid\n  return errors;\n};\n\nexport default reduxForm({\n  form: 'photoForm',\n  validate,\n})(PhotoForm);\n"]},"metadata":{},"sourceType":"module"}