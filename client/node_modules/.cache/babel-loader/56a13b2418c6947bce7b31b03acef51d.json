{"ast":null,"code":"import * as type from './types';\nimport photos from '../apis/photos';\nimport history from '../history';\nexport const signIn = userId => {\n  return {\n    type: type.SIGN_IN,\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: type.SIGN_OUT\n  };\n};\nexport const hoverPhoto = photoId => {\n  return {\n    type: type.HOVER_PHOTO,\n    payload: photoId\n  };\n};\nexport const leavePhoto = () => {\n  return {\n    type: type.LEAVE_PHOTO\n  };\n};\nexport const createPhoto = formValues => {\n  return async (dispatch, getState) => {\n    // POST request with axios to create new photo with current userId\n    const {\n      userId\n    } = getState().auth;\n    const response = await photos.post('/photos', { ...formValues,\n      userId\n    });\n    dispatch({\n      type: type.CREATE_PHOTO,\n      payload: response.data\n    }); // Navigate the user back to list of photos (only after the API request is resolved)\n\n    history.push('/');\n  };\n};\nexport const fetchPhotos = () => {\n  return async dispatch => {\n    // GET request with axios to get all photos\n    const response = await photos.get('/photos');\n    dispatch({\n      type: type.FETCH_PHOTOS,\n      payload: response.data\n    });\n  };\n};\nexport const fetchPhoto = id => {\n  return async dispatch => {\n    // GET request for specific photo with given id\n    const response = await photos.get(`/photos/${id}`);\n    dispatch({\n      type: type.FETCH_PHOTO,\n      payload: response.data\n    });\n  };\n};\nexport const editPhoto = (id, formValues) => {\n  return async dispatch => {\n    // PATCH request with axios to edit specific photo with new formValues\n    const response = await photos.patch(`/photos/${id}`, formValues);\n    dispatch({\n      type: type.EDIT_PHOTO,\n      payload: response.data\n    }); // Navigate the user back to list of streams (only after API request is resolved)\n\n    history.push('/');\n  };\n};\nexport const deletePhoto = id => {\n  return async dispatch => {\n    // DELETE request with axios to remove specific photo\n    await photos.delete(`/photos/${id}`);\n    dispatch({\n      type: type.DELETE_PHOTO,\n      payload: id\n    }); // Navigate the user back to list of streams (only after API request is resolved)\n\n    history.push('/');\n  };\n};\nexport const pinPhoto = photoId => {\n  return async (dispatch, getState) => {\n    // POST request with axios to pin photo to current user's board\n    const {\n      userId\n    } = getState().auth;\n    const response = await photos.post('/photos/board', {\n      photoId,\n      userId\n    });\n    dispatch({\n      type: type.PIN_PHOTO,\n      payload: response.data\n    }); // Navigate the user back to list of photos (only after the API request is resolved)\n\n    history.push('/board');\n  };\n};","map":{"version":3,"sources":["/Users/Sarah Schwartz/Desktop/CODING/Apps REACT/pinterest-clone-react-redux/pinterest-clone-react-redux/client/src/actions/index.js"],"names":["type","photos","history","signIn","userId","SIGN_IN","payload","signOut","SIGN_OUT","hoverPhoto","photoId","HOVER_PHOTO","leavePhoto","LEAVE_PHOTO","createPhoto","formValues","dispatch","getState","auth","response","post","CREATE_PHOTO","data","push","fetchPhotos","get","FETCH_PHOTOS","fetchPhoto","id","FETCH_PHOTO","editPhoto","patch","EDIT_PHOTO","deletePhoto","delete","DELETE_PHOTO","pinPhoto","PIN_PHOTO"],"mappings":"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","sourcesContent":["import * as type from './types';\nimport photos from '../apis/photos';\nimport history from '../history';\n\nexport const signIn = (userId) => {\n  return {\n    type: type.SIGN_IN,\n    payload: userId,\n  };\n};\n\nexport const signOut = () => {\n  return {\n    type: type.SIGN_OUT,\n  };\n};\n\nexport const hoverPhoto = (photoId) => {\n  return {\n    type: type.HOVER_PHOTO,\n    payload: photoId,\n  };\n};\n\nexport const leavePhoto = () => {\n  return {\n    type: type.LEAVE_PHOTO,\n  };\n};\n\nexport const createPhoto = (formValues) => {\n  return async (dispatch, getState) => {\n    // POST request with axios to create new photo with current userId\n    const { userId } = getState().auth;\n    const response = await photos.post('/photos', { ...formValues, userId });\n    dispatch({\n      type: type.CREATE_PHOTO,\n      payload: response.data,\n    });\n    // Navigate the user back to list of photos (only after the API request is resolved)\n    history.push('/');\n  };\n};\n\nexport const fetchPhotos = () => {\n  return async (dispatch) => {\n    // GET request with axios to get all photos\n    const response = await photos.get('/photos');\n    dispatch({\n      type: type.FETCH_PHOTOS,\n      payload: response.data,\n    });\n  };\n};\n\nexport const fetchPhoto = (id) => {\n  return async (dispatch) => {\n    // GET request for specific photo with given id\n    const response = await photos.get(`/photos/${id}`);\n    dispatch({\n      type: type.FETCH_PHOTO,\n      payload: response.data,\n    });\n  };\n};\n\nexport const editPhoto = (id, formValues) => {\n  return async (dispatch) => {\n    // PATCH request with axios to edit specific photo with new formValues\n    const response = await photos.patch(`/photos/${id}`, formValues);\n    dispatch({\n      type: type.EDIT_PHOTO,\n      payload: response.data,\n    });\n    // Navigate the user back to list of streams (only after API request is resolved)\n    history.push('/');\n  };\n};\n\nexport const deletePhoto = (id) => {\n  return async (dispatch) => {\n    // DELETE request with axios to remove specific photo\n    await photos.delete(`/photos/${id}`);\n    dispatch({\n      type: type.DELETE_PHOTO,\n      payload: id,\n    });\n    // Navigate the user back to list of streams (only after API request is resolved)\n    history.push('/');\n  };\n};\n\nexport const pinPhoto = (photoId) => {\n  return async (dispatch, getState) => {\n    // POST request with axios to pin photo to current user's board\n    const { userId } = getState().auth;\n    const response = await photos.post('/photos/board', { photoId, userId });\n    dispatch({\n      type: type.PIN_PHOTO,\n      payload: response.data,\n    });\n    // Navigate the user back to list of photos (only after the API request is resolved)\n    history.push('/board');\n  };\n};\n"]},"metadata":{},"sourceType":"module"}